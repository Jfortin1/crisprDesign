% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addSpacerAlignments.R
\name{addSpacerAlignments}
\alias{addSpacerAlignments}
\alias{addSpacerAlignmentsIterative}
\alias{getSpacerAlignments}
\title{Functions for finding and characterizing on- and off-targets of
    spacer sequences.}
\usage{
addSpacerAlignmentsIterative(
  guideSet,
  aligner = c("bowtie", "blast", "biostrings"),
  columnName = "alignments",
  addSummary = TRUE,
  txObject = NULL,
  tssObject = NULL,
  custom_seq = NULL,
  bowtie_index = NULL,
  seqlevelsStyle = c("UCSC", "NCBI"),
  bsgenome = NULL,
  n_mismatches = 0,
  all_alignments = FALSE,
  canonical = TRUE,
  ignore_pam = FALSE,
  cut_offset = NULL,
  standard_chr_only = TRUE,
  both_strands = TRUE,
  tss_window = NULL,
  n0_max = 5,
  n1_max = 100,
  n2_max = 100
)

addSpacerAlignments(
  guideSet,
  aligner = c("bowtie", "blast", "biostrings"),
  columnName = "alignments",
  addSummary = TRUE,
  txObject = NULL,
  tssObject = NULL,
  custom_seq = NULL,
  bowtie_index = NULL,
  seqlevelsStyle = c("UCSC", "NCBI"),
  bsgenome = NULL,
  n_mismatches = 0,
  n_max_alignments = 1000,
  all_alignments = TRUE,
  canonical = TRUE,
  ignore_pam = FALSE,
  cut_offset = NULL,
  standard_chr_only = TRUE,
  both_strands = TRUE,
  tss_window = NULL
)

getSpacerAlignments(
  spacers,
  aligner = c("bowtie", "blast", "biostrings"),
  custom_seq = NULL,
  bowtie_index = NULL,
  seqlevelsStyle = c("UCSC", "NCBI"),
  bsgenome = NULL,
  n_mismatches = 0,
  n_max_alignments = 1000,
  all_alignments = TRUE,
  crisprNuclease = NULL,
  canonical = TRUE,
  ignore_pam = FALSE,
  cut_offset = NULL,
  standard_chr_only = TRUE,
  both_strands = TRUE
)
}
\arguments{
\item{guideSet}{A \linkS4class{GuideSet} object.}

\item{aligner}{Which genomic alignment method should be used?
 Must be one of "bowtie", "blast", and "biostrings".
"bowtie" by default.}

\item{columnName}{String specifying the columm name storing the alignments
in \code{mcols(guideSet)}. "alignments" by default.}

\item{addSummary}{Should summary columns be added to \code{guideSet}?
TRUE by default.}

\item{txObject}{A \linkS4class{TxDb} object or a \linkS4class{GRangesList}
object obtained using \code{\link{TxDb2GRangesList}} for annotating
on-target and off-target alignments using gene annotation.}

\item{tssObject}{A \linkS4class{GRanges} object specifying TSS coordinates.}

\item{custom_seq}{Optional string specifying the target DNA sequence for
the search space. This will limit the off-target
search to the specified custom sequence.}

\item{bowtie_index}{Path to the bowtie index to be used for alignment.}

\item{seqlevelsStyle}{String specifying which type of seqnames
should be used. Default is "UCSC" (e.g. "chr7"; "NCBI"
style would be "7").}

\item{bsgenome}{A \linkS4class{BSgenome} object from which to extract
sequences if a \linkS4class{GRanges} object is provided as input.}

\item{n_mismatches}{Maximum number of mismatches permitted between guide RNA
and genomic DNA.}

\item{all_alignments}{Should all all possible alignments be returned?
FALSE by defaule.}

\item{canonical}{Should only alignments corresponding to canonical
PAM sequences be returned? TRUE by default.}

\item{ignore_pam}{If TRUE, will return all matches regardless of
PAM sequence. FALSE by default.}

\item{cut_offset}{Distance in nucleotides between \code{pam_site}
and \code{cut_site}, if different from default offset specified in
the \code{crisprNuclease} object.}

\item{standard_chr_only}{Should only standard chromosomes be considered?
TRUE by default.}

\item{both_strands}{When \code{custom_seq} is specified,
should both strands be considered? TRUE by default.}

\item{tss_window}{Window size of promoters upstream of gene TSS to search
for overlap with spacer sequence. Must be a numeric vector of length 2:
upstream limit and downstream limit. Default is \code{c(-500, 500)},
which includes 500bp upstream and downstream of the TSS.}

\item{n0_max}{Number of maximum on-target alignments tolerated for
\code{\link{addSpacerAlignmentsIterative}}.}

\item{n1_max}{Number of maximum 1mm off-target alignments tolerated
for \code{\link{addSpacerAlignmentsIterative}}.}

\item{n2_max}{Number of maximum 2mm off-target alignments tolerated
for \code{\link{addSpacerAlignmentsIterative}}.}

\item{n_max_alignments}{Maximum number of alignments to report by bowtie 
for each spacer. Effectively set to \code{Inf} when \code{allPossible}
is \code{TRUE}.}

\item{spacers}{Character vector of gRNA spacer sequences.
All sequences must be equal in length.}

\item{crisprNuclease}{A \linkS4class{CrisprNuclease} object.}
}
\value{
\code{\link{getSpacerAlignments}} returns a \linkS4class{GRanges} 
    object storing spacer alignment data, including genomic coordinates, 
    spacer and PAM sequences, and position of mismatches relative to
    \code{pam_site}.

\code{\link{addSpacerAlignments}} is similar to 
    \code{\link{getSpacerAlignments}}, with the addition of adding the 
    alignment data to a list-column in \code{mcols(guideSet)} specified
    by \code{columnName}.

\code{\link{addSpacerAlignmentsIterative}} is similar to
    \code{\link{addSpacerAlignments}}, except that it avoids finding 
    alignments for spacer sequences that have a large number of on-targets
    and/or off-targets to speed up the off-target search. The parameters
    \code{n0_max}, \code{n1_max} and \code{n2_max} specify the maximum
    number of on-targets (n0) and off-targets
    (n1 for 1-mismatch off-targets, and n2 for 2-mismatch off-targets) 
    tolerated before the algorithm stops finding additional off-targets
    for spacer sequences that exceed those quotas.
}
\description{
Functions for finding and characterizing on- and off-targets of
    spacer sequences.
}
\details{
The differential columns stored in
\code{mcols(guideSet)[["geneAnnotation"]]} are:

\itemize{
\item \code{spacer} Transcript ID.
\item \code{pam}
\item \code{pam_site} PAM site of the found protospacer.
\item \code{cute_site} Cut site of the found protospacer.
\item \code{n_mismatches} Integer value specifying the number
    of nucleotide mismatches between the spacer sequence of the query
    and the spacer sequence found in the genome or custom sequence.
\item \code{mm1} Numeric value specifying the relative position of the
    first mismatch with respect to the PAM site. NA if there is no
    mismatch.
\item \code{mm2} Numeric value specifying the relative position of the
    second mismatch with respect to the PAM site. NA if there is no
    second mismatch.
\item \code{mm3} Numeric value specifying the relative position of the
    third mismatch with respect to the PAM site. NA if there is no
    third mismatch.
\item \code{canonical} Is the PAM sequence of the found protospacer sequence
    canonical?
\item \code{query} Spacer sequence of the query gRNA.
\item \code{cds} Character vector specifying gene names of CDS overlapping
    the found protospacer sequence.
\item \code{fiveUTRs} Character vector specifying gene names of 5'UTRs overlapping
    the found protospacer sequence.
\item \code{threeUTRs} Character vector specifying gene names of 3'UTRs overlapping
    the found protospacer sequence.
\item \code{exons} Character vector specifying gene names of exons overlapping
    the found protospacer sequence.
\item \code{introns} Character vector specifying gene names of introns overlapping
    the found protospacer sequence.
\item \code{intergenic} Charater vector specifying neighborhood genes when the found
    protospacer sequence is not located in a gene.
}
}
\examples{


# Creating a bowtie index:
library(Rbowtie)
fasta <- system.file(package="crisprDesignS4", "fasta/chr12.fa")
outdir <- tempdir()
Rbowtie::bowtie_build(fasta,
                      outdir=outdir,
                      force=TRUE,
                      prefix="chr12")
bowtieIndex <- file.path(outdir, "chr12")

# Adding spacer alignments:
guideSet <- addSpacerAlignments(guideSetExample,
                                bowtie_index=bowtieIndex,
                                n_mismatches=2,
                                txObject=grListExample)

}
\author{
Jean-Philippe Fortin
}
